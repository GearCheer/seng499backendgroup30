"""
Written in Python 3.7.3

Requires keras and tensorflow

Install dependencies using:
    pip3 install keras
    pip3 install tensorflow
"""

from keras.applications.resnet50 import ResNet50
from keras.preprocessing.image import img_to_array, load_img, ImageDataGenerator
from keras.layers import Dense, GlobalAveragePooling2D
from keras.models import Model


# CONSTANTS
DATASET_PATH = "dataset-small" # Path to datset from working directory.
NUM_CLASSES = 6 # Number of classes (1 for each folder in dataset).
BATCH_SIZE = 2  # Number of images in each batch generated by the image generator.
#                 Equals the number of images considered before updating weights when training the model.
#                 TODO: Increase BATCH_SIZE when

datagen = ImageDataGenerator()

# Create iterator for training/validation/test images
train_it = datagen.flow_from_directory(DATASET_PATH + '/train/', target_size=(384, 512), batch_size=BATCH_SIZE)
# val_it   = datagen.flow_from_directory(DATASET_PATH + '/validation/', target_size=(384, 512), batch_size=BATCH_SIZE)
# test_it  = datagen.flow_from_directory(DATASET_PATH + '/test/', target_size=(384, 512), batch_size=BATCH_SIZE)

# Create model with ResNet50 weights, but drop top layer
res_model = ResNet50(input_shape=(384, 512, 3), weights='imagenet', include_top=False)

# Add new top layer.  This is a fully connected layer with one node for each output class.
x = res_model.output
x = GlobalAveragePooling2D()(x)
predictions = Dense(NUM_CLASSES, activation='softmax')(x)
model = Model(inputs=res_model.input, outputs=predictions)

# Set all but last layer to be untrainable
for layer in model.layers[:-1]:
    layer.trainable=False

# Set last layer to be trainable
for layer in model.layers[-1:]:
    layer.trainable=True

# Compile and fit
model.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy']) # old: categorical_crossentropy
model.fit_generator(train_it, epochs=5, steps_per_epoch=BATCH_SIZE, verbose=1)
